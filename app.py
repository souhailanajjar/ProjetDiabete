import streamlit as st
import pandas as pd
import joblib

# Titre de l'application
st.title("ü©∫ Classification du Diab√®te")
st.markdown("S√©lectionnez un mod√®le de machine learning et entrez les informations du patient pour pr√©dire le diab√®te (0 = Non, 1 = Oui).")

# S√©lection du mod√®le
model_choice = st.selectbox("üß† Choisissez un mod√®le :", ["RandomForest", "LogisticRegression", "KNN", "SVM"])

# Chargement du mod√®le et du scaler
try:
    model = joblib.load(f"{model_choice}_model.pkl")
    scaler = joblib.load("scaler.pkl")
except FileNotFoundError:
    st.error("‚ùå Mod√®le ou scaler introuvable. Veuillez ex√©cuter 'train_models.py' pour les g√©n√©rer.")
    st.stop()

# Saisie des donn√©es du patient avec pr√©cision sans arrondi
st.subheader("üì• Saisir les donn√©es du patient :")
Pregnancies = st.number_input("Nombre de grossesses", min_value=0)
Glucose = st.number_input("Taux de glucose", min_value=0.0, format="%.5f")
BloodPressure = st.number_input("Pression art√©rielle", min_value=0.0, format="%.5f")
SkinThickness = st.number_input("√âpaisseur de peau", min_value=0.0, format="%.5f")
Insulin = st.number_input("Taux d'insuline", min_value=0.0, format="%.5f")
BMI = st.number_input("Indice de masse corporelle (BMI)", min_value=0.0, format="%.5f")
DiabetesPedigreeFunction = st.number_input("Ant√©c√©dents familiaux (DPF)", min_value=0.0, format="%.5f")
Age = st.number_input("√Çge", min_value=1)

# Bouton de pr√©diction
if st.button("üîÆ Pr√©dire"):
    # V√©rification des champs (sauf Pregnancies qui peut √™tre 0)
    if (Glucose == 0.0 or BloodPressure == 0.0 or SkinThickness == 0.0 or
        Insulin == 0.0 or BMI == 0.0 or DiabetesPedigreeFunction == 0.0 or Age == 1):
        st.error("‚ùå Veuillez remplir tous les champs obligatoires avant de pr√©dire.")
    else:
        # Construction du DataFrame
        input_data = pd.DataFrame([[Pregnancies, Glucose, BloodPressure, SkinThickness,
                                    Insulin, BMI, DiabetesPedigreeFunction, Age]],
                                  columns=["Pregnancies", "Glucose", "BloodPressure", "SkinThickness",
                                           "Insulin", "BMI", "DiabetesPedigreeFunction", "Age"])

        # Normalisation des donn√©es
        input_scaled = scaler.transform(input_data)

        # Pr√©diction
        prediction = model.predict(input_scaled)[0]

        st.subheader("üìä R√©sultat :")
        st.write(f"üëâ **{int(prediction)}** (0 = Non diab√©tique, 1 = Diab√©tique)")
